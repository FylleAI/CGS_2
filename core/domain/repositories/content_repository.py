"""Content repository interface."""

from abc import ABC, abstractmethod
from typing import List, Optional
from uuid import UUID
from datetime import datetime

from ..entities.content import Content, ContentType, ContentStatus


class ContentRepository(ABC):
    """
    Abstract repository for content persistence.

    This interface defines the contract for content data access,
    allowing different implementations (file-based, database, etc.)
    """

    @abstractmethod
    async def save(self, content: Content) -> Content:
        """
        Save content.

        Args:
            content: The content to save

        Returns:
            The saved content with any generated fields populated
        """
        pass

    @abstractmethod
    async def get_by_id(self, content_id: UUID) -> Optional[Content]:
        """
        Get content by ID.

        Args:
            content_id: The content ID

        Returns:
            The content if found, None otherwise
        """
        pass

    @abstractmethod
    async def get_by_title(self, title: str) -> Optional[Content]:
        """
        Get content by title.

        Args:
            title: The content title

        Returns:
            The content if found, None otherwise
        """
        pass

    @abstractmethod
    async def get_by_workflow_id(self, workflow_id: UUID) -> List[Content]:
        """
        Get all content generated by a specific workflow.

        Args:
            workflow_id: The workflow ID

        Returns:
            List of content from the workflow
        """
        pass

    @abstractmethod
    async def get_by_type(self, content_type: ContentType) -> List[Content]:
        """
        Get all content of a specific type.

        Args:
            content_type: The content type

        Returns:
            List of content of the specified type
        """
        pass

    @abstractmethod
    async def get_by_status(self, status: ContentStatus) -> List[Content]:
        """
        Get all content with a specific status.

        Args:
            status: The content status

        Returns:
            List of content with the specified status
        """
        pass

    @abstractmethod
    async def get_by_client_profile(self, profile_name: str) -> List[Content]:
        """
        Get all content for a specific client profile.

        Args:
            profile_name: The client profile name

        Returns:
            List of content for the profile
        """
        pass

    @abstractmethod
    async def get_by_topic(self, topic: str) -> List[Content]:
        """
        Get all content related to a specific topic.

        Args:
            topic: The topic

        Returns:
            List of content related to the topic
        """
        pass

    @abstractmethod
    async def get_by_tags(self, tags: List[str]) -> List[Content]:
        """
        Get content that has any of the specified tags.

        Args:
            tags: List of tags to search for

        Returns:
            List of content with matching tags
        """
        pass

    @abstractmethod
    async def get_all(self) -> List[Content]:
        """
        Get all content.

        Returns:
            List of all content
        """
        pass

    @abstractmethod
    async def get_recent(self, limit: int = 10) -> List[Content]:
        """
        Get recently created content.

        Args:
            limit: Maximum number of content items to return

        Returns:
            List of recent content
        """
        pass

    @abstractmethod
    async def get_published(self) -> List[Content]:
        """
        Get all published content.

        Returns:
            List of published content
        """
        pass

    @abstractmethod
    async def get_drafts(self) -> List[Content]:
        """
        Get all draft content.

        Returns:
            List of draft content
        """
        pass

    @abstractmethod
    async def update(self, content: Content) -> Content:
        """
        Update existing content.

        Args:
            content: The content to update

        Returns:
            The updated content

        Raises:
            ValueError: If content doesn't exist
        """
        pass

    @abstractmethod
    async def delete(self, content_id: UUID) -> bool:
        """
        Delete content.

        Args:
            content_id: The content ID to delete

        Returns:
            True if deleted, False if not found
        """
        pass

    @abstractmethod
    async def exists(self, content_id: UUID) -> bool:
        """
        Check if content exists.

        Args:
            content_id: The content ID to check

        Returns:
            True if exists, False otherwise
        """
        pass

    @abstractmethod
    async def search(self, query: str) -> List[Content]:
        """
        Search content by title, body, or tags.

        Args:
            query: The search query

        Returns:
            List of matching content
        """
        pass

    @abstractmethod
    async def get_content_metrics(self, content_id: UUID) -> Optional[dict]:
        """
        Get detailed metrics for specific content.

        Args:
            content_id: The content ID

        Returns:
            Content metrics dictionary if found, None otherwise
        """
        pass

    @abstractmethod
    async def get_content_history(self, content_id: UUID) -> List[Content]:
        """
        Get version history for content.

        Args:
            content_id: The content ID

        Returns:
            List of content versions ordered by version number
        """
        pass

    @abstractmethod
    async def archive_content(self, content_id: UUID) -> bool:
        """
        Archive content (soft delete).

        Args:
            content_id: The content ID to archive

        Returns:
            True if archived, False if not found
        """
        pass
