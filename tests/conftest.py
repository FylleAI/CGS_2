"""Pytest configuration and fixtures."""

import pytest
import tempfile
import shutil
from pathlib import Path
from uuid import uuid4

from services.content_workflow.domain.entities.agent import Agent, AgentRole
from services.content_workflow.domain.entities.content import Content, ContentType, ContentFormat
from services.content_workflow.domain.entities.workflow import Workflow, WorkflowType
from services.content_workflow.domain.entities.task import Task
from services.content_workflow.domain.value_objects.provider_config import ProviderConfig, LLMProvider
from services.content_workflow.domain.value_objects.client_profile import ClientProfile
from services.content_workflow.domain.value_objects.generation_params import GenerationParams


@pytest.fixture
def temp_dir():
    """Create a temporary directory for tests."""
    temp_path = tempfile.mkdtemp()
    yield Path(temp_path)
    shutil.rmtree(temp_path)


@pytest.fixture
def sample_agent():
    """Create a sample agent for testing."""
    return Agent(
        name="test_agent",
        role=AgentRole.COPYWRITER,
        goal="Create test content",
        backstory="A test agent for unit testing",
        system_message="You are a test agent",
        tools=["test_tool"],
    )


@pytest.fixture
def sample_task():
    """Create a sample task for testing."""
    return Task(
        name="test_task", description="A test task", expected_output="Test output"
    )


@pytest.fixture
def sample_workflow(sample_task):
    """Create a sample workflow for testing."""
    workflow = Workflow(
        name="test_workflow",
        workflow_type=WorkflowType.BASIC,
        description="A test workflow",
    )
    workflow.add_task(sample_task)
    return workflow


@pytest.fixture
def sample_content():
    """Create sample content for testing."""
    return Content(
        title="Test Content",
        body="This is test content for unit testing.",
        content_type=ContentType.ARTICLE,
        content_format=ContentFormat.MARKDOWN,
        topic="Testing",
    )


@pytest.fixture
def sample_provider_config():
    """Create a sample provider configuration."""
    return ProviderConfig(provider=LLMProvider.OPENAI, model="gpt-4o", temperature=0.7)


@pytest.fixture
def sample_client_profile():
    """Create a sample client profile."""
    return ClientProfile(
        name="test_client",
        description="Test client profile",
        brand_voice="Professional and friendly",
        target_audience="Test audience",
    )


@pytest.fixture
def sample_generation_params():
    """Create sample generation parameters."""
    return GenerationParams(
        topic="Test Topic",
        content_type=ContentType.ARTICLE,
        content_format=ContentFormat.MARKDOWN,
        target_word_count=500,
    )


@pytest.fixture
def mock_llm_response():
    """Mock LLM response for testing."""
    return (
        "# Test Article\n\nThis is a test article generated by the mock LLM provider."
    )


# Async test utilities
@pytest.fixture
def event_loop():
    """Create an event loop for async tests."""
    import asyncio

    loop = asyncio.new_event_loop()
    yield loop
    loop.close()


# Test data fixtures
@pytest.fixture
def test_data_dir():
    """Path to test data directory."""
    return Path(__file__).parent / "data"


@pytest.fixture
def sample_markdown_content():
    """Sample markdown content for testing."""
    return """# Sample Article

This is a sample article for testing purposes.

## Introduction

Lorem ipsum dolor sit amet, consectetur adipiscing elit.

## Main Content

- Point 1
- Point 2
- Point 3

## Conclusion

This concludes our sample article.
"""
